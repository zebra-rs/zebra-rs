name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Only run on Rust file changes
    paths:
      - "**/*.rs"
      - "Cargo.toml"
      - "Cargo.lock"
      - "*/Cargo.toml"

jobs:
  claude-review:
    # Only run if PR contains [claude-review] in title or @claude in body/comments
    if: |
      contains(github.event.pull_request.title, '[claude-review]') ||
      contains(github.event.pull_request.body, '@claude') ||
      github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this Rust pull request and provide feedback on:
            - Rust code quality and idioms (use of Result/Option, error handling, ownership)
            - Memory safety and potential panics
            - Performance considerations (async/await usage, allocations)
            - Network programming best practices (for routing protocols)
            - Security concerns (input validation, buffer handling)
            - Test coverage and quality
            - Documentation completeness
            
            Focus on Rust-specific patterns and the networking/routing domain.
            Be constructive and helpful in your feedback.
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Allow Claude to run Rust development tools
          allowed_tools: "Bash(cargo check),Bash(cargo test),Bash(cargo clippy),Bash(cargo fmt --check),Bash(make format)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

