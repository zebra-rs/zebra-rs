module config {
  yang-version "1";

  namespace "urn:ietf:params:xml:ns:yang:zebra";
  prefix "config";

  import ietf-inet-types {
    prefix inet;
  }

  import extension {
    prefix ext;
  }

  import dhcp {
    prefix dhcp;
  }

  import ietf-bgp {
    prefix bgp;
  }

  import ietf-bgp-policy {
    prefix policy;
  }

  grouping config {
    container system {
      ext:help "System configuration";
      description
        "System group configuration.";

      leaf hostname {
        type string;
        description
          "The name of the host. This name can be a single domain label or the
           fully qualified domain name of the host.";
      }
      leaf empty {
        type empty;
      }
      leaf-list track-interface {
        type string;
        description
          "Interfaces to track.";
      }
      container presence {
        presence "Presence container";
      }
      container dhcp {
        uses "dhcp:dhcp";
      }
      container etcd {
        list endpoints {
          key "url";
          leaf url {
            type string;
          }
        }
        leaf path {
          type string;
        }
      }
    }

    container routing {
      ext:help "Routing configuration";
      uses "ietf-bgp:bgp";
      // uses "policy:defined-sets";
      container static {
        ext:help "Static route configuration";
        list route {
          key "prefix";
          leaf prefix {
            type inet:ipv4-prefix;
          }
          list nexthop {
            key "address";
            leaf "address" {
              type inet:ipv4-address;
              description "Nexthop of the route";
            }
          }
          leaf distance {
            type uint8;
            description "Distance of the route.";
          }
          leaf metric {
            type uint32;
            description "Metric of the route.";
          }
        }
      }

      container static-ietf {
        container ipv4 {
          description
            "Support for a 'static' pseudo-protocol instance
         consists of a list of routes.";
          list route {
            key "destination-prefix";
            description
              "A list of static routes.";
            leaf destination-prefix {
              type inet:ipv4-prefix;
              description
                "IPv4 destination prefix.";
            }
            leaf description {
              type string;
              description
                "Textual description of the route.";
            }
            container next-hop {
              description
                "Support for next-hop.";
              list next-hop {
                key "index";
                description
                  "An entry in a next-hop list.

               Modules for address families MUST augment this list
               with a leaf containing a next-hop address of that
               address family.";
                leaf index {
                  type string;
                  description
                    "A user-specified identifier utilized to uniquely
                 reference the next-hop entry in the next-hop list.
                 The value of this index has no semantic meaning
                 other than for referencing the entry.";
                }
                leaf next-hop-address {
                  type inet:ipv4-address;
                  description
                    "IPv4 address of the next hop.";
                }
                leaf outgoing-interface {
                  type string;
                  description
                    "Name of the outgoing interface.";
                }
              }
            }
          }
        }
      }
    }

    list community-list {
      description
        "Enclosing container for list of defined BGP community
           sets.";
      key "name";
      description
        "List of defined BGP community sets.";
      leaf name {
        type string;
        description
          "Name / label of the community set -- this is used to
               reference the set in match conditions.";
      }
      list seq {
        key "seq";
        description
          "List of defined BGP community sets.";
        leaf seq {
          type uint32;
          description
            "Name / label of the community set -- this is used to
               reference the set in match conditions.";
        }
        leaf action {
          mandatory true;
          type enumeration {
            enum permit;
            enum deny;
          }
        }
        leaf-list member {
          type string;
          description
            "Members of the community set";
        }
      }
    }
  }
}
