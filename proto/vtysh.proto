// Copyright 2024 Zebra Project.

syntax = "proto3";

package vtysh;

// The Command execution.
service Exec {
  rpc DoExec(ExecRequest) returns (ExecReply) {}
}

// Command message type.
enum ExecType {
  EXEC = 0;
  COMPLETE = 1;
  COMPLETE_TRAILING_SPACE = 2;
  COMPLETE_FIRST_COMMANDS = 3;
  COMPLETE_DYNAMIC = 4;
}

// Command reply format type.
enum ExecConentType {
  CONTENT_TEXT = 0;
  CONTENT_JSON = 1;
}

// The request message containing user input string.
message ExecRequest {
  ExecType type = 1;
  string mode = 2;
  uint32 privilege = 3;
  string line = 4;
  repeated string commands = 5;
  repeated string args = 6;
  ExecConentType content = 7;
}

// Command exec code.
enum ExecCode {
  SUCCESS = 0;
  NOMATCH = 1;
  INCOMPLETE = 2;
  AMBIGUOUS = 3;
  SHOW = 4;
  REDIRECT = 5;
  REDIRECT_SHOW = 6;
}

// The response message containing the completion with help.
message ExecReply {
  ExecCode code = 1;
  string lines = 2;
  uint32 port = 3;
  repeated string candidates = 4;
  repeated CommandPath paths = 5;
}

// The Command register.
service Register {
  rpc DoRegister(RegisterRequest) returns (RegisterReply) {}
  rpc DoRegisterModule(RegisterModuleRequest) returns (RegisterModuleReply) {}
}

// The request message for command definition.
message RegisterRequest {
  string name = 1;
  string module = 2;
  string mode = 3;
  string line = 4;
  uint32 privilege = 5;
  repeated string helps = 6;
  ExecCode code = 7;
}

// The response message for callback ID.
message RegisterReply {
  int32 callbackid = 1;
}

// The request message mode information.
message RegisterModuleRequest {
  string module = 1;
  string port = 2;
}

// The response message containing the callbackID for the mode change.
message RegisterModuleReply {
  int32 result = 1;
}

// The module exec
service ExecModule {
  rpc DoExecModule(ExecModuleRequest) returns (ExecModuleReply) {}
}

// The request message mode information.
message ExecModuleRequest {
  int32 callbackid = 1;
  repeated string args = 2;
}

// The response message containing the callbackID for the mode change.
message ExecModuleReply {
  int32 result = 1;
  string line = 2;
}

// Configuration service
enum ConfigType {
  SET = 0;
  DELETE = 1;
  VALIDATE_START = 2;
  VALIDATE_END = 3;
  VALIDATE_SUCCESS = 4;
  VALIDATE_FAILED = 5;
  COMMIT_START = 6;
  COMMIT_END = 7;
  SUBSCRIBE = 8;
  SUBSCRIBE_MULTI = 9;
  SUBSCRIBE_REQUEST = 10;
  JSON_CONFIG = 11;
  API_CALL_FINISHED = 12;
}

// Configuration
service Config {
  rpc DoConfig(stream ConfigRequest) returns (stream ConfigReply) {}
}

// Subscribe type.
enum SubscribeType {
  COMMAND = 0;
  JSON = 1;
}

message SubscribeRequest {
  SubscribeType type = 1;
  string path = 2;
}

message ConfigRequest {
  ConfigType type = 1;
  string module = 2;
  uint32 port = 3;
  SubscribeType subtype = 4;
  repeated string path = 5;
  repeated SubscribeRequest subscribe = 6;
}

message ConfigReply {
  int32 result = 1;
  ConfigType type = 2;
  repeated string path = 3;
  string json = 4;
}

// YANG match type.
enum YangMatch {
  Dir = 0;
  DirMatched = 1;
  Key = 2;
  KeyMatched = 3;
  Leaf= 4;
  LeafMatched = 5;
  LeafList = 6;
  LeafListMatched = 7;
}

message CommandPath {
  string name = 1;
  string key = 2;
  YangMatch ymatch = 3;
  repeated string mandatory = 4;
}

// Show service.
message ShowRequest {
  string line = 1;
  bool json = 2;
  repeated CommandPath paths = 3;
}

message ShowReply {
  string str = 1;
}

service Show {
  rpc Show(ShowRequest) returns (stream ShowReply) {}
}

// Apply service.
message ApplyRequest {
  string line = 1;
}

enum ApplyCode {
  APPLIED = 0;
  FORMAT_ERROR = 1;
  PARSE_ERROR = 2;
  MISSING_MANDATORY = 3;
}

message ApplyReply {
  ApplyCode code = 1;
  string description = 2;
}

service Apply {
  rpc Apply(stream ApplyRequest) returns (ApplyReply) {}
}
